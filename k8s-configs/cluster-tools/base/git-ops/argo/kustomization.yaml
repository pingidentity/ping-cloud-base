kind: Kustomization
apiVersion: kustomize.config.k8s.io/v1beta1

namespace: argocd

resources:
- base
- argocd-image-updater.yaml
- custom-resources.yaml

generatorOptions:
  disableNameSuffixHash: true

configMapGenerator:
- files:
  - install-custom-tools.sh
  name: install-custom-tools

# Point to the ping-cluster-tools repo equivalents pushed to ECR
images:
- name: quay.io/argoproj/argocd
  newName: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/argo/argocd
- name: redis
  newName: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/redis
- name: ghcr.io/dexidp/dex
  newName: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/dexidp/dex

patches:
- path: argo-notifications-cm.yaml
- patch: |-
    # Set the several log values to "error"
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: argocd-cmd-params-cm
    data:
      # Set the logging level. One of: debug|info|warn|error (default "info")
      # See https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-cmd-params-cm-yaml/ for example
      controller.log.level: "error"
      server.log.level: "error"
      reposerver.log.level: "error"
      applicationsetcontroller.log.level: "error"
      notificationscontroller.log.level: "error"
- patch: |-
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: argocd-applicationset-controller
    spec:
      template:
        spec:
          containers:
          - name: argocd-applicationset-controller
            # This env vars added for further compatibility with ArgoCD 2.8.0+ - do not delete this after upgrade
            env:
            - name: ARGOCD_APPLICATIONSET_CONTROLLER_LOGLEVEL
              valueFrom:
                configMapKeyRef:
                  key: applicationsetcontroller.log.level
                  name: argocd-cmd-params-cm
                  optional: true
- patch: |-
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: argocd-applicationset-controller
    spec:
      template:
        spec:
          containers:
          - name: argocd-applicationset-controller
            resources:
              requests:
                memory: "500Mi"
                cpu: "1000m"
              limits:
                memory: "1000Mi"
                cpu: "2000m"
- patch: |-
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: argocd-dex-server
    spec:
      template:
        spec:
          containers:
          - name: dex
            resources:
              requests:
                memory: "125Mi"
                cpu: "250m"
              limits:
                memory: "250Mi"
                cpu: "500m"
- patch: |-
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: argocd-image-updater
    spec:
      template:
        spec:
          containers:
          - name: argocd-image-updater
            resources:
              requests:
                memory: "40Mi"
                cpu: "10m"
              limits:
                memory: "80Mi"
                cpu: "30m"
- patch: |-
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: argocd-notifications-controller
    spec:
      template:
        spec:
          containers:
          - name: argocd-notifications-controller
            resources:
              requests:
                memory: "50Mi"
                cpu: "10m"
              limits:
                memory: "100Mi"
                cpu: "30m"
- patch: |-
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: argocd-redis
    spec:
      template:
        spec:
          containers:
          - name: redis
            resources:
              requests:
                memory: "125Mi"
                cpu: "250m"
              limits:
                memory: "250Mi"
                cpu: "500m"
- patch: |-
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: argocd-repo-server
    spec:
      template:
        spec:
          containers:
          - name: argocd-repo-server
            resources:
              requests:
                memory: "500Mi"
                cpu: "500m"
              limits:
                memory: "1000Mi"
                cpu: "1000m"
- patch: |-
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: argocd-server
    spec:
      template:
        spec:
          containers:
          - name: argocd-server
            resources:
              requests:
                memory: "125Mi"
                cpu: "125m"
              limits:
                memory: "250Mi"
                cpu: "250m"
- patch: |-
    apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      name: argocd-application-controller
    spec:
      template:
        spec:
          containers:
          - name: argocd-application-controller
            resources:
              requests:
                memory: "1000Mi"
                cpu: "1000m"
              limits:
                memory: "2000Mi"
                cpu: "2000m"
- patch: |-
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: argocd-notifications-controller
    spec:
      template:
        spec:
          containers:
          - name: argocd-notifications-controller
            # This env vars added for further compatibility with ArgoCD 2.8.0+ - do not delete this after upgrade
            env:
            - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGLEVEL
              valueFrom:
                configMapKeyRef:
                  key: notificationscontroller.log.level
                  name: argocd-cmd-params-cm
                  optional: true
- patch: |-
    # Ignore diffs in webhook client CA bundle (ref: https://argo-cd-docs.readthedocs.io/en/latest/user-guide/diffing/)
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: argocd-cm
    data:
      accounts.image-updater: apiKey
      accounts.config-team: apiKey,login
      resource.customizations: |
        admissionregistration.k8s.io/MutatingWebhookConfiguration:
          ignoreDifferences: |
            jsonPointers:
            - /webhooks/0/clientConfig/caBundle
      kustomize.buildOptions: --load-restrictor LoadRestrictionsNone --enable-helm --helm-command /usr/local/bin/helm-command.sh
- patch: |-
    # Policy for a user 'config-team` to allow restart on K8s StatefulSets
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: argocd-rbac-cm
    data:
      policy.csv: |
        p, config-team, applications, action/apps/StatefulSet/restart, *, allow
      policy.default: role:readonly
- patch: |-
      # Mount Beluga-specific scripts within the container
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: argocd-repo-server
      spec:
        template:
          spec:
            containers:
            - name: argocd-repo-server
              volumeMounts:
              - name: git-ops-command
                mountPath: /usr/local/bin/git-ops-command.sh
                subPath: git-ops-command.sh
              - name: helm-command
                mountPath: /usr/local/bin/helm-command.sh
                subPath: helm-command.sh
              - name: tools-dir
                mountPath: /usr/local/bin/envsubst
                subPath: envsubst
              - name: tools-dir
                mountPath: /usr/local/bin/kustomize
                subPath: kustomize
              - name: tools-dir
                mountPath: /usr/local/bin/git-remote-codecommit
                subPath: git-remote-codecommit
              - name: tools-dir
                mountPath: /home/argocd/.local/lib/python3.7/site-packages/git_remote_codecommit/__init__.py
                subPath: __init__.py
- patch: |-
    # Patch argocd-repo-server to run the plugin container as a sidecar
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: argocd-repo-server
    spec:
      template:
        spec:
          containers:
          - name: git-ops-command
            command: [/var/run/argocd/argocd-cmp-server] # Entrypoint should be Argo CD lightweight CMP server i.e. argocd-cmp-server
            # We don't need to use the full ArgoCD image here but we use it for consistency sake when installing all of the tools for both containers.
            image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/argo/argocd:v2.8.3
            securityContext:
              runAsNonRoot: true
              runAsUser: 999
            volumeMounts:
              - mountPath: /var/run/argocd
                name: var-files
              - mountPath: /home/argocd/cmp-server/plugins
                name: plugins
              - mountPath: /home/argocd/cmp-server/config/plugin.yaml
                subPath: plugin.yaml
                name: git-ops-command-plugin-cm
              # Starting with v2.4, do NOT mount the same tmp volume as the repo-server container. The filesystem separation helps 
              # mitigate path traversal attacks.
              - mountPath: /tmp
                name: cmp-tmp
              - mountPath: /usr/local/bin/git-ops-command.sh
                name: git-ops-command
                subPath: git-ops-command.sh
              - name: helm-command
                mountPath: /usr/local/bin/helm-command.sh
                subPath: helm-command.sh
              - name: tools-dir
                mountPath: /usr/local/bin/envsubst
                subPath: envsubst
              - name: tools-dir
                mountPath: /usr/local/bin/kustomize
                subPath: kustomize
              - name: tools-dir
                mountPath: /usr/local/bin/git-remote-codecommit
                subPath: git-remote-codecommit
              - name: tools-dir
                mountPath: /home/argocd/.local/lib/python3.7/site-packages/git_remote_codecommit/__init__.py
                subPath: __init__.py
          volumes:
          - configMap:
              name: git-ops-command-plugin-cm
            name: git-ops-command-plugin-cm
          - emptyDir: {}
            name: cmp-tmp
          - configMap:
              name: git-ops-command
            name: git-ops-command
- patch: |-
    # Add an init container to install a few custom tools into the ArgoCD repo server
    # TODO: try to manage this image in a way that isn't inline to aid with upgrading/finding the image
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: argocd-repo-server
    spec:
      template:
        spec:
          initContainers:
          # Installs custom tools
          - name: install-custom-tools
            image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/python:3.9.1-slim
            command: [ "install-custom-tools.sh" ]
            volumeMounts:
            - name: tools-dir
              mountPath: /tools
            - name: install-custom-tools
              mountPath: /usr/local/bin/install-custom-tools.sh
              subPath: install-custom-tools.sh
- patch: |-
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: argocd-repo-server
    spec:
      template:
        spec:
          volumes:
          - name: tools-dir
            emptyDir: {}
          - name: git-ops-command
            configMap:
              name: git-ops-command
              defaultMode: 0555
          - name: helm-command
            configMap:
              name: helm-command
              defaultMode: 0555              
          - name: install-custom-tools
            configMap:
              name: install-custom-tools
              defaultMode: 0555
- patch: |-
    # Add the "sealedsecrets.bitnami.com/managed: true" annotation to secrets so they are manageable by Bitnami
    apiVersion: v1
    kind: Secret
    metadata:
      name: argocd-notifications-secret
      annotations:
        sealedsecrets.bitnami.com/managed: "true"
- patch: |-
    apiVersion: v1
    kind: Secret
    metadata:
      name: argocd-secret
      annotations:
        sealedsecrets.bitnami.com/managed: "true"
        sealedsecrets.bitnami.com/patch: "true"
- patch: |-
    # Add init container to create Argo clusters for all CDEs from customer-hub
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: argocd-server
    spec:
      template:
        spec:
          initContainers:
          - name: argocd-bootstrap
            image: public.ecr.aws/r2h3l6e4/pingcloud-services/argocd-bootstrap/dev:v1.19-release-branch-latest
            imagePullPolicy: Always
            envFrom:
              - configMapRef:
                  name: argocd-bootstrap
- patch: |-
    # Enabling the deployment of argocd resources on a node belonging to the 'core' node group by adding tolerations
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: argocd-server
    spec:
      template:
        spec:
          tolerations:
            - key: CriticalAddonsOnly
              operator: Equal
              value: core
              effect: NoSchedule
- patch: |-
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: argocd-applicationset-controller
    spec:
      template:
        spec:
          tolerations:
            - key: CriticalAddonsOnly
              operator: Equal
              value: core
              effect: NoSchedule
- patch: |-
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: argocd-dex-server
    spec:
      template:
        spec:
          tolerations:
            - key: CriticalAddonsOnly
              operator: Equal
              value: core
              effect: NoSchedule
- patch: |-
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: argocd-redis
    spec:
      template:
        spec:
          tolerations:
            - key: CriticalAddonsOnly
              operator: Equal
              value: core
              effect: NoSchedule
- patch: |-
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: argocd-repo-server
    spec:
      template:
        spec:
          tolerations:
            - key: CriticalAddonsOnly
              operator: Equal
              value: core
              effect: NoSchedule
- patch: |-
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: argocd-image-updater
    spec:
      template:
        spec:
          tolerations:
            - key: CriticalAddonsOnly
              operator: Equal
              value: core
              effect: NoSchedule
- patch: |-
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: argocd-notifications-controller
    spec:
      template:
        spec:
          tolerations:
            - key: CriticalAddonsOnly
              operator: Equal
              value: core
              effect: NoSchedule
- patch: |-
    apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      name: argocd-application-controller
    spec:
      template:
        spec:
          tolerations:
            - key: CriticalAddonsOnly
              operator: Equal
              value: core
              effect: NoSchedule
