# https://kubernetes.github.io/ingress-nginx/how-it-works/#when-a-reload-is-required
# Ingress Nginx controller webhook validation is not recommended for production environments because it can introduce a single point of failure. If the webhook server is unavailable, then new Ingress resources will not be able to be created or updated. Additionally, the webhook server can be a target for attacks.
kind: Kustomization
apiVersion: kustomize.config.k8s.io/v1beta1

resources:
- ingress-controller.yaml

# Removing the ingress-nginx namespace as we have two namespace in P1AS - ingress-nginx-private and nginx-nginx-public
patches:
- patch: |
    $patch: delete
    apiVersion: v1
    kind: Namespace
    metadata:
      name: ingress-nginx
  target:
    kind: Namespace
    name: ingress-nginx

  # Removing the Job kind as we don't use in P1AS
- patch: |
    $patch: delete
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: ingress-nginx-admission-create
      namespace: ingress-nginx
  target:
    kind: Job
    name: ingress-nginx-admission-create
- patch: |
    $patch: delete
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: ingress-nginx-admission-patch
      namespace: ingress-nginx
  target:
    kind: Job
    name: ingress-nginx-admission-patch

 # Removing the ingress-nginx-controller ConfigMap as we have three ConfigMaps in P1AS
- patch: |
    $patch: delete
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: ingress-nginx-controller
      namespace: ingress-nginx
  target:
    kind: ConfigMap
    name: ingress-nginx-controller

  # Removing the ingress-nginx-admission ServiceAccount as we use nginx-ingress-serviceaccount in P1AS
- patch: |
    $patch: delete
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: ingress-nginx-admission
      namespace: ingress-nginx
  target:
    kind: ServiceAccount
    name: ingress-nginx-admission

  # Removing the ingress-nginx-admission Role as we use nginx-ingress-role in P1AS
- patch: |
    $patch: delete
    apiVersion: v1
    kind: Role
    metadata:
      name: ingress-nginx-admission
      namespace: ingress-nginx
  target:
    kind: Role
    name: ingress-nginx-admission

  # Removing the ingress-nginx-admission ClusterRole as we have two ClusterRoles in P1AS - nginx-ingress-clusterrole-private and nginx-ingress-clusterrole-public
- patch: |
    $patch: delete
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: ingress-nginx
  target:
    kind: ClusterRole
    name: ingress-nginx
- patch: |
    $patch: delete
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: ingress-nginx-admission
  target:
    kind: ClusterRole
    name: ingress-nginx-admission

  # Removing the ingress-nginx-admission RoleBinding as we use nginx-ingress-role-nisa-binding in P1AS
- patch: |
    $patch: delete
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: ingress-nginx-admission
      namespace: ingress-nginx
  target:
    kind: RoleBinding
    name: ingress-nginx-admission

  # Removing the ingress-nginx-admission ClusterRoleBinding as we have two ClusterRoleBindings in P1AS - nginx-ingress-clusterrole-nisa-binding-private , nginx-ingress-clusterrole-nisa-binding-public
- patch: |
    $patch: delete
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: ingress-nginx
  target:
    kind: ClusterRoleBinding
    name: ingress-nginx
- patch: |
    $patch: delete
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: ingress-nginx-admission
  target:
    kind: ClusterRoleBinding
    name: ingress-nginx-admission

  # Removing the ingress-nginx-controller-admission Service as we use ingress-nginx Service in P1AS
- patch: |
    $patch: delete
    apiVersion: v1
    kind: Service
    metadata:
      name: ingress-nginx-controller-admission
      namespace: ingress-nginx
  target:
    kind: Service
    name: ingress-nginx-controller-admission

  # Removing the nginx IngressClass as we use two IngressClass in P1AS
- patch: |
    $patch: delete
    apiVersion: networking.k8s.io/v1
    kind: IngressClass
    metadata:
      name: nginx
  target:
    kind: IngressClass
    name: nginx

  # Removing the ValidatingWebhookConfiguration as we don't use in P1AS
- patch: |
    $patch: delete
    apiVersion: admissionregistration.k8s.io/v1
    kind: ValidatingWebhookConfiguration
    metadata:
      name: ingress-nginx-admission
  target:
    kind: ValidatingWebhookConfiguration
    name: ingress-nginx-admission

# Note: this patch must match against name/namespace prior to rest of patches in public/private kustomize dirs
- patch: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: ingress-nginx-controller
      namespace: ingress-nginx
    spec:
      template:
        spec:
          containers:
            - name: controller
              image: public.ecr.aws/r2h3l6e4/pingcloud-services/sigsci-nginx-ingress-controller:v2.0.0-RC1

- target:
    # Modifiying Deployment kind to P1AS needs
    kind: Deployment
    name: ingress-nginx-controller
  patch: |
    # Removing namespaces as we have two different namespaces in P1AS
    - op: remove
      path: /metadata/namespace

    # Replacing  name as we use nginx-ingress-controller in P1AS
    - op: replace
      path: /metadata/name
      value: nginx-ingress-controller

    # Modifying the spec related portion as P1AS needs
    - op: remove
      path: /spec/minReadySeconds
    - op: remove
      path: /spec/revisionHistoryLimit
    - op: add
      path: /spec/template/spec/terminationGracePeriodSeconds
      value: 300
    - op: replace
      path: /spec/template/spec/serviceAccountName
      value: nginx-ingress-serviceaccount
    - op: replace
      path: /spec/template/spec/containers/0/name
      value: nginx-ingress-controller
    - op: replace
      path: /spec/template/spec/containers/0/ports/0/containerPort
      value: 8080
    - op: replace
      path: /spec/template/spec/containers/0/ports/2/name
      value: https
    - op: remove
      path: /spec/template/spec/containers/0/ports/1
    - op: replace
      path: /spec/template/spec/containers/0/imagePullPolicy
      value: Always

    - op: replace
      path: /spec/strategy/rollingUpdate/maxUnavailable
      value: 0

    - op: replace
      path: /spec/template/spec/containers/0/args
      value:
          - /nginx-ingress-controller
          - --configmap=$(POD_NAMESPACE)/nginx-configuration
          - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
          - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx
          - --annotations-prefix=nginx.ingress.kubernetes.io
          - --http-port=8080
          - --https-port=8443
          - --shutdown-grace-period=60

    - op: replace
      path: /spec/template/spec/containers/0/resources
      value:
          limits:
            cpu: 2
            memory: 4Gi
          requests:
            cpu: 2
            memory: 4Gi

    # Added securityContext
    - op: add
      path: /spec/template/spec/securityContext
      value:
         runAsNonRoot: true

    # Replaced allowPrivilegeEscalation in securityContext
    - op: replace
      path: /spec/template/spec/containers/0/securityContext/allowPrivilegeEscalation
      value: false

    # Added readOnlyRootFilesystem in securityContext
    - op: add
      path: /spec/template/spec/containers/0/securityContext/readOnlyRootFilesystem
      value: false

    # Added runAsNonRoot in securityContext
    - op: add
      path: /spec/template/spec/containers/0/securityContext/runAsNonRoot
      value: true

    # Added runAsGroup  in securityContext
    - op: add
      path: /spec/template/spec/containers/0/securityContext/runAsGroup
      value: 101

    # Use topology Spread Constraints to spread pods accross az
    - op: add
      path: /spec/template/spec/topologySpreadConstraints
      value:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/name: ingress-nginx
          maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway

    # Removed metadata
    - op: remove
      path: /spec/template/metadata

    # Removed labels
    - op: remove
      path: /metadata/labels

    # Removed selector
    - op: remove
      path: /spec/selector

    # Removed volumeMounts
    - op: remove
      path: /spec/template/spec/containers/0/volumeMounts

    # Removed volumes
    - op: remove
      path: /spec/template/spec/volumes

    # Removed dnsPolicy
    - op: remove
      path: /spec/template/spec/dnsPolicy

    # Removed nodeSelector
    - op: remove
      path: /spec/template/spec/nodeSelector

    # Removed annotations in metadata
    - op: add
      path: /spec/template/metadata
      value:
        annotations:
          prometheus.io/port: "10254"
          prometheus.io/scrape: "true"

- target:
      # Modifiying Service kind to P1AS needs
      kind: Service
      name: ingress-nginx-controller
      namespace: ingress-nginx
  patch: |
    - op: add
      path: /metadata/annotations
      value:
          service.beta.kubernetes.io/aws-load-balancer-type: nlb

    - op: add
      path: /metadata/annotations
      value:
          service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"

    - op: add
      path: /spec/externalTrafficPolicy
      value: Local

    - op: replace
      path: /spec/type
      value: LoadBalancer

    - op: replace
      path: /spec/ports/0/targetPort
      value: 8080

    - op: replace
      path: /spec/ports/1/targetPort
      value: 8443

    - op: replace
      path: /metadata/name
      value: ingress-nginx

    - op: remove
      path: /spec/ipFamilies

    - op: remove
      path: /spec/ipFamilyPolicy

    - op: remove
      path: /metadata/labels

    - op: remove
      path: /metadata/namespace

    - op: remove
      path: /spec/selector


# Modifiying Role kind to P1AS needs
- target:
      kind: Role
      name: ingress-nginx
      namespace: ingress-nginx
  patch: |
    - op: remove
      path: /metadata/labels

    - op: remove
      path: /metadata/namespace

    - op: replace
      path: /metadata/name
      value: nginx-ingress-role

    - op: replace
      path: /rules/6/resourceNames
      value:
        - ingress-controller-leader

- target:
      # Modifiying RoleBinding kind to P1AS needs
      kind: RoleBinding
      name: ingress-nginx
      namespace: ingress-nginx
  patch: |
    - op: remove
      path: /metadata/labels

    - op: remove
      path: /metadata/namespace

    - op: remove
      path: /subjects/0/namespace

    - op: replace
      path: /metadata/name
      value: nginx-ingress-role-nisa-binding

    - op: replace
      path: /roleRef/name
      value: nginx-ingress-role

    - op: replace
      path: /subjects/0/name
      value: nginx-ingress-serviceaccount

- target:
      # Modifiying ServiceAccount kind to P1AS needs
      kind: ServiceAccount
      name: ingress-nginx
      namespace: ingress-nginx
  patch: |
    - op: remove
      path: /metadata/labels

    - op: remove
      path: /metadata/namespace

    - op: replace
      path: /metadata/name
      value: nginx-ingress-serviceaccount

configMapGenerator:
    # Adding ConfigMaps to P1AS needs
  - name: nginx-configuration
    behavior: create
    Options:
      disableNameSuffixHash: true
  - name: tcp-services
    behavior: create
    Options:
      disableNameSuffixHash: true
  - name: udp-services
    behavior: create
    Options:
      disableNameSuffixHash: true

