filter {
    if ([kubernetes][container_name] =~ "pingaccess(-was)?(-admin)?") {
        ### Parse only logs starting from log path.
        ### Everything else(hooks, logs going directly to console, etc) goes to logstash index without any parsing
        if ([log] =~ /^\/opt\/out\/instance(\/\w+)?\/log[s]?/) {
            grok {
                match => {
                    "log" => [ "^\/opt\/out\/instance(\/\w+)?\/log[s]?\/%{DATA:log_name}(\.log)?(\.out)? %{GREEDYDATA:log_string}" ]
                }
                remove_field => ["log"]
            }
            if ([log_string] == "") {
                drop {}
            }
            if ([kubernetes][container_name] =~ "pingaccess-was(-admin)?"){
                mutate {
                    add_field => {"[@metadata][app]" => "pa-was"}
                }
            }
            else {
                mutate {
                    add_field => {"[@metadata][app]" => "pa"}
                }
            }
            mutate {
                add_field => {"[@metadata][index]" => "%{[@metadata][app]}-%{log_name}"}
            }
            if ([log_name] == "pingaccess_engine_audit") {
              dissect {
                mapping => {
                  "log_string" => "%{timestamp}| %{exchangeId}| %{trackingId}| %{roundTripMS} ms| %{proxyRoundTripMS} ms| %{resource}| %{subject}| %{authMech}| %{client}| %{method}| %{requestUri}| %{responseCode}| %{failedRuleType}| %{failedRuleName}| %{applicationName}| %{resourceName}| %{pathPrefix}"
                }
                remove_field => ["log_string"]
              }
              mutate {
                replace => {"[@metadata][index]" => "%{[@metadata][app]}-engine-audit"}
              }
            } else if ([log_name] == "pingaccess_api_audit") {
              dissect {
                mapping => {
                  "log_string" => "%{timestamp}| %{exchangeId}| %{trackingId}| %{roundTripMS} ms| %{subject}| %{authMech}| %{client}| %{method}| %{requestUri}| %{responseCode->}"
                }
                remove_field => ["log_string"]
              }
              mutate {
                replace => {"[@metadata][index]" => "%{[@metadata][app]}-api-audit"}
                strip => ["responseCode"]
              }
            }
            else if ([log_name] == "pingaccess_agent_audit") {
              dissect {
                mapping => {
                  "log_string" => "%{timestamp}| %{exchangeId}| %{trackingId}| %{roundTripMS} ms| %{resource}| %{client}| %{method}| %{requestUri}| %{responseCode}| %{applicationName}| %{resourceName}| %{pathPrefix}"
                }
                remove_field => ["log_string"]
              }
	          mutate {
	            replace => {"[@metadata][index]" => "%{[@metadata][app]}-agent-audit"}
	          }
            }
            else if ([log_name] == "pingaccess_sideband_client_audit") {
              dissect {
                mapping => {
                  "log_string" => "%{timestamp}| %{exchangeId}| %{trackingId}| %{roundTripMS} ms| %{client}| %{method}| %{requestUri}| %{responseCode}| %{sidebandName}| %{sidebandDecision}"
                }
                remove_field => ["log_string"]
              }
              mutate {
                replace => {"[@metadata][index]" => "%{[@metadata][app]}-sideband-client-audit"}
              }
            }
            else if ([log_name] == "pingaccess_sideband_audit") {
              dissect {
                mapping => {
                  "log_string" => "%{timestamp}| %{exchangeId}| %{trackingId}| %{roundTripMS} ms| %{resource}| %{client}| %{method}| %{requestUri}| %{responseCode}| %{applicationName}| %{resourceName}| %{pathPrefix}| %{sidebandName}"
                }
                remove_field => ["log_string"]
              }
              mutate {
                replace => {"[@metadata][index]" => "%{[@metadata][app]}-sideband-audit"}
              }
            }
            else if ([log_name] == "pingaccess") {
              grok {
                match => {
                  "log_string" => [ "%{TIMESTAMP_ISO8601:timestamp}[ ]{1,2}%{WORD:logLevel} \[(?:|%{NOTSPACE:exchangeId})\] %{NOTSPACE:className} - %{GREEDYDATA:message}" ]
                }
                remove_field => ["log_string"]
              }
              mutate {
                replace => {"[@metadata][index]" => "%{[@metadata][app]}-pingaccess"}
              }
            }
            else if ([log_name] == "audit") {
              grok {
                match => {
                  "log_string" => [ "%{TIMESTAMP_ISO8601:timestamp} %{GREEDYDATA:message}"]
                }
                remove_field => ["log_string"]
              }
              mutate {
                replace => {"[@metadata][index]" => "%{[@metadata][app]}-upgrade-audit"}
              }
            }
            else if ([log_name] == "upgrade") {
              grok {
                match => {
                  "log_string" => [ "%{TIMESTAMP_ISO8601:timestamp}[ ]{1,2}%{WORD:logLevel} %{NOTSPACE:className}:%{NUMBER:position} - %{GREEDYDATA:message}"]
                }
                remove_field => ["log_string"]
                add_field => {"[@metadata][index]" => "%{[@metadata][app]}-upgrade-log"}
              }
              mutate {
                replace => {"[@metadata][index]" => "%{[@metadata][app]}-upgrade-log"}
              }
            }
            else if ([log_name] == "upgrade_status") {
              mutate {
                rename => { "log_string" => "message" }
                replace => {"[@metadata][index]" => "%{[@metadata][app]}-upgrade-status"}
              }
            }
            else {
              mutate {
                rename => { "log_string" => "message" }
              }
            }
            if ([timestamp]) {
              date {
                match => [ "timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss"]
                remove_field => ["timestamp"]
              }
            }
            ### Security Enrichments begin here, ENRICH THE IP ADDRESS DETAIL
            if ([client]) {
                geoip
                {
                    source => "client"
                }
                translate {
                    source => "client"
                    target => "threat_intel"
                    fallback => "No"
                    dictionary_path => '/enrichment-cache-files/AlienVaultIP.yml'
                    refresh_behaviour => "replace"
                }
                translate {
                    source => "client"
                    target => "tor_intel"
                    fallback => "No"
                    dictionary_path => '/enrichment-cache-files/TorNodes.yml'
                    refresh_behaviour => "replace"
                }
                translate {
                    source => "[geoip][country_name]"
                    target => "malicious_country"
                    fallback => "No"
                    dictionary_path => '/enrichment-cache-files/MaliciousCountries.yml'
                    refresh_behaviour => "replace"
                }
                translate {
                    source => "[geoip][country_name]"
                    target => "known_country"
                    fallback => "No"
                    dictionary_path => '/enrichment-cache-files/KnownCountries.yml'
                    refresh_behaviour => "replace"
                }
                if([malicious_country] == "No" and [known_country] == "No"){
                    mutate {
                      add_field => { "suspicious_country" => "YES" }
                    }
                }
            }
        }
    }
}