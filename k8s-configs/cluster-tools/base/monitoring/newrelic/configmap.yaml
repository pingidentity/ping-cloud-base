---
# Script to provision NewRelic secrets

apiVersion: v1
kind: ConfigMap
metadata:
  name: copy-secret
  namespace: newrelic
data:
  copy-secret.sh: |-
    #!/bin/sh

    cd /tmp

    kubectl get secret ${SECRET_NAME} \
        -n ${SECRET_NAMESPACE} \
        -o jsonpath='{.data.NEW_RELIC_LICENSE_KEY}' |
    base64 -d > NEW_RELIC_LICENSE_KEY

    kubectl create secret generic ${SECRET_NAME} \
        -n ${CURRENT_NAMESPACE} \
        --from-file=NEW_RELIC_LICENSE_KEY

    rm -f NEW_RELIC_LICENSE_KEY

---
# Source: p1as-newrelic/charts/nri-bundle/charts/newrelic-infrastructure/templates/controlplane/agent-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: newrelic
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.17.0
    helm.sh/chart: newrelic-infrastructure-3.22.0
  name: nri-bundle-nrk8s-agent-controlplane
data:
  newrelic-infra.yml: |-
    # This is the configuration file for the infrastructure agent. See:
    # https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/configuration/infrastructure-agent-configuration-settings/
    custom_attributes:
      clusterName: test-cluster
    http_server_enabled: true
    http_server_port: 8001
    is_forward_only: true
---
# Source: p1as-newrelic/charts/nri-bundle/charts/newrelic-infrastructure/templates/controlplane/scraper-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.17.0
    helm.sh/chart: newrelic-infrastructure-3.22.0
  name: nri-bundle-nrk8s-controlplane
  namespace: newrelic
data:
  nri-kubernetes.yml: |-
    interval: 15s
    namespaceSelector: {}
    controlPlane:
      retries: 3
      timeout: 10s
      enabled: true
      etcd:
        autodiscover:
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:4001
              - url: http://localhost:2381
            matchNode: true
            namespace: kube-system
            selector: tier=control-plane,component=etcd
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:4001
            matchNode: true
            namespace: kube-system
            selector: k8s-app=etcd-manager-main
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:4001
            matchNode: true
            namespace: kube-system
            selector: k8s-app=etcd
        enabled: true
      scheduler:
        autodiscover:
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:10259
            matchNode: true
            namespace: kube-system
            selector: tier=control-plane,component=kube-scheduler
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:10259
            matchNode: true
            namespace: kube-system
            selector: k8s-app=kube-scheduler
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:10259
            matchNode: true
            namespace: openshift-kube-scheduler
            selector: app=openshift-kube-scheduler,scheduler=true
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:10259
            matchNode: true
            namespace: kube-system
            selector: app=openshift-kube-scheduler,scheduler=true
        enabled: true
      controllerManager:
        autodiscover:
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:10257
            matchNode: true
            namespace: kube-system
            selector: tier=control-plane,component=kube-controller-manager
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:10257
            matchNode: true
            namespace: kube-system
            selector: k8s-app=kube-controller-manager
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:10257
            matchNode: true
            namespace: openshift-kube-controller-manager
            selector: app=kube-controller-manager,kube-controller-manager=true
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:10257
            matchNode: true
            namespace: kube-system
            selector: app=kube-controller-manager,kube-controller-manager=true
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:10257
            matchNode: true
            namespace: kube-system
            selector: app=controller-manager,controller-manager=true
        enabled: true
      apiServer:
        autodiscover:
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:8443
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:6443
              - url: http://localhost:8080
            matchNode: true
            namespace: kube-system
            selector: tier=control-plane,component=kube-apiserver
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:8443
              - url: http://localhost:8080
            matchNode: true
            namespace: kube-system
            selector: k8s-app=kube-apiserver
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:8443
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:6443
            matchNode: true
            namespace: openshift-kube-apiserver
            selector: app=openshift-kube-apiserver,apiserver=true
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:8443
            matchNode: true
            namespace: kube-system
            selector: app=openshift-kube-apiserver,apiserver=true
        enabled: true
---
# Source: p1as-newrelic/charts/nri-bundle/charts/newrelic-infrastructure/templates/ksm/agent-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: newrelic
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.17.0
    helm.sh/chart: newrelic-infrastructure-3.22.0
  name: nri-bundle-nrk8s-agent-ksm
data:
  newrelic-infra.yml: |-
    # This is the configuration file for the infrastructure agent. See:
    # https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/configuration/infrastructure-agent-configuration-settings/
    custom_attributes:
      clusterName: test-cluster
    http_server_enabled: true
    http_server_port: 8002
    is_forward_only: true
---
# Source: p1as-newrelic/charts/nri-bundle/charts/newrelic-infrastructure/templates/ksm/scraper-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.17.0
    helm.sh/chart: newrelic-infrastructure-3.22.0
  name: nri-bundle-nrk8s-ksm
  namespace: newrelic
data:
  nri-kubernetes.yml: |-
    interval: 15s
    namespaceSelector: {}
    ksm:
      enabled: true
      retries: 3
      scheme: http
      selector: app.kubernetes.io/name=kube-state-metrics
      timeout: 10s
---
# Source: p1as-newrelic/charts/nri-bundle/charts/newrelic-infrastructure/templates/kubelet/agent-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: newrelic
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.17.0
    helm.sh/chart: newrelic-infrastructure-3.22.0
  name: nri-bundle-nrk8s-agent-kubelet
data:
  newrelic-infra.yml: |-
    # This is the configuration file for the infrastructure agent. See:
    # https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/configuration/infrastructure-agent-configuration-settings/
    custom_attributes:
      clusterName: test-cluster
    enable_process_metrics: true
    features:
      docker_enabled: false
    http_server_enabled: true
    http_server_port: 8003
---
# Source: p1as-newrelic/charts/nri-bundle/charts/newrelic-infrastructure/templates/kubelet/integrations-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: newrelic
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.17.0
    helm.sh/chart: newrelic-infrastructure-3.22.0
  name: nri-bundle-nrk8s-integrations-cfg
data:
  # This ConfigMap holds config files for integrations. They should have the following format:
  #redis-config.yml: |
  #  # Run auto discovery to find pods with label "app=redis"
  #  discovery:
  #    command:
  #      # Run discovery for Kubernetes. Use the following optional arguments:
  #      # --namespaces: Comma separated list of namespaces to discover pods on
  #      # --tls: Use secure (TLS) connection
  #      # --port: Port used to connect to the kubelet. Default is 10255
  #      exec: /var/db/newrelic-infra/nri-discovery-kubernetes --port PORT --tls
  #      match:
  #        label.app: redis
  #  integrations:
  #    - name: nri-redis
  #      env:
  #        # using the discovered IP as the hostname address
  #        HOSTNAME: ${discovery.ip}
  #        PORT: 6379
  #        KEYS: '{"0":["<KEY_1>"],"1":["<KEY_2>"]}'
  #        REMOTE_MONITORING: true
  #      labels:
  #        env: production
  pingmetadata.yaml: |-
    integrations:
      - config:
          apis:
            - event_type: pingmetaDataOutputSample
              jq: .version
              url: http://metadata.ping-cloud:5000
          name: pingmetadata
        interval: 2m
        name: nri-flex
---
# Source: p1as-newrelic/charts/nri-bundle/charts/newrelic-infrastructure/templates/kubelet/scraper-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.17.0
    helm.sh/chart: newrelic-infrastructure-3.22.0
  name: nri-bundle-nrk8s-kubelet
  namespace: newrelic
data:
  nri-kubernetes.yml: |
    interval: 15s
    namespaceSelector: {}
    kubelet:
      enabled: true
      retries: 3
      scraperMaxReruns: 4
      timeout: 10s
---
# Source: p1as-newrelic/charts/nri-bundle/charts/newrelic-prometheus-agent/templates/configmap.yaml
kind: ConfigMap
metadata:
  name: nri-bundle-newrelic-prometheus-agent
  namespace: newrelic
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: newrelic-prometheus-agent
    app.kubernetes.io/version: v2.37.8
    helm.sh/chart: newrelic-prometheus-agent-1.3.0
apiVersion: v1
data:
  config.yaml: |-
    # Configuration for newrelic-prometheus-configurator
    newrelic_remote_write:
      extra_write_relabel_configs:
        - action: drop
          regex: kube_.+|container_.+|machine_.+|cadvisor_.+
          source_labels:
            - __name__
        - action: replace
          regex: timeseries_write_(.*)
          replacement: counter
          separator: ;
          source_labels:
            - __name__
          target_label: newrelic_metric_type
        - action: replace
          regex: sql_byte(.*)
          replacement: counter
          separator: ;
          source_labels:
            - __name__
          target_label: newrelic_metric_type
    static_targets:
      jobs:
        - extra_metric_relabel_config:
            - action: keep
              regex: prometheus_agent_active_series|prometheus_target_interval_length_seconds|prometheus_target_scrape_pool_targets|prometheus_remote_storage_samples_pending|prometheus_remote_storage_samples_in_total|prometheus_remote_storage_samples_retried_total|prometheus_agent_corruptions_total|prometheus_remote_storage_shards|prometheus_sd_kubernetes_events_total|prometheus_agent_checkpoint_creations_failed_total|prometheus_agent_checkpoint_deletions_failed_total|prometheus_remote_storage_samples_dropped_total|prometheus_remote_storage_samples_failed_total|prometheus_sd_kubernetes_http_request_total|prometheus_agent_truncate_duration_seconds_sum|prometheus_build_info|process_resident_memory_bytes|process_virtual_memory_bytes|process_cpu_seconds_total|prometheus_remote_storage_bytes_total
              source_labels:
                - __name__
          job_name: self-metrics
          skip_sharding: true
          targets:
            - localhost:9090
    common:
      external_labels:
        cluster_name: test-cluster
      scrape_interval: 30s
    kubernetes:
      jobs:
        - job_name_prefix: default
          target_discovery:
            endpoints: true
            filter:
              annotations:
                prometheus.io/scrape: true
            pod: true
        - integrations_filter:
            enabled: false
          job_name_prefix: newrelic
          target_discovery:
            endpoints: true
            filter:
              annotations:
                newrelic.io/scrape: true
            pod: true
      integrations_filter:
        app_values:
          - redis
          - traefik
          - calico
          - nginx
          - coredns
          - kube-dns
          - etcd
          - cockroachdb
          - velero
          - harbor
          - argocd
        enabled: true
        source_labels:
          - app.kubernetes.io/name
          - app.newrelic.io/name
          - k8s-app
---
# Source: p1as-newrelic/charts/nri-bundle/charts/nri-kube-events/templates/agent-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nri-kube-events
    app.kubernetes.io/version: 2.2.2
    helm.sh/chart: nri-kube-events-3.2.0
  name: nri-bundle-nri-kube-events-agent-config
  namespace: newrelic
data:
  newrelic-infra.yml: |
    is_forward_only: true
    http_server_enabled: true
    http_server_port: 8001
---
# Source: p1as-newrelic/charts/nri-bundle/charts/nri-kube-events/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nri-kube-events
    app.kubernetes.io/version: 2.2.2
    helm.sh/chart: nri-kube-events-3.2.0
  name: nri-bundle-nri-kube-events-config
  namespace: newrelic
data:
  config.yaml: |-
    sinks:
      - name: newRelicInfra
        config:
          agentEndpoint: http://localhost:8001/v1/data
          clusterName: test-cluster
          agentHTTPTimeout: 30s
    captureDescribe: true
    describeRefresh: 24h
    captureEvents: true